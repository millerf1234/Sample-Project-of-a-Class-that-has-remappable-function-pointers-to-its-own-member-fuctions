[I am writing this description over a year after having finished writing this project with the intent of providing context]

                                             --------------------
                                              --  BACKGROUND  --  
                                             --------------------
  The first several dozen C++ classes I wrote followed a 'defensive-programming' style approach in which
most of the member functions, upon being called, perform a sequence of 'self-sanity' checks for ensuring
the state of its calling-object meets all requirements before executing any meaningful logic. Upon failure
at any point in this sequence of self-checks I was having the object report a unique and highly-detailed 
error message of what exactly was wrong and then returning. While writing code this way made writing any
future code which uses these classes a breeze to debug, it quickly was becoming apparent to me that this
style of coding has several major downsides. 
  The most acute downside I was aware of at that time was the sheer amount of additional coding required
on my part to implement even the most basic of functionality; in some cases functions which had a fairly
redimentrary purpose would require several times as many lines of code for just checking preconditions
compared with the lines of code required to carry out the actual logic. This issue was made all-the-worse
by my inexperience towards writing error messages, with a wide veriety of formats and poorly-worded 
statements 




writing a unique error message containing for every possible with many of the checks simply being that the object has been properly initialized and 
hasn't become corrupt),

  
                                             ---------------------
                                              --  Description  --  
                                             ---------------------
  The purpose of this project is to experiment with implementing a C++ class that has
public function pointers to its own private member functions. Based off the state of
the object, the public function pointers can be remapped from amongst the private member
functions so that the desired behavior is executed depending on the state of the object.

  While the same resulting functionality for the class could have been implemented with just
a single version of each remappable function where instead the implementation has them check
the object's state and then select the approprite behavior, performing this check can incur a
cost for a function that is called repeatedly. By using a class implemented with these
remappable function pointers, the cost of selecting the correct behavior is transfered from
being required as part of each function call to being only required once, reducing overhead.

  NOTE: 
To help with the readability of code within a class defining function pointers to class member
functions, it is advised to use a typedef to simplify the function-pointer syntax. A quick 
google search should provide numerous examples of this (and if I get time in the future I may
consider adding a second example class which uses typedefs for the function pointers).
