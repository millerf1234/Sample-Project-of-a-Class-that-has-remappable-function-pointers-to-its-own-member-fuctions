       [Feb 2019 Disclaimer: I am writing this description nearly a year after having finished coding this project]
       
       (I know, I know, my spelling is probably really bad in this document. I plan to run it through a spell checker 
          once I tighten up the overall structure and flow)


-------------------------------------------------------------------------------------------------------------------------
                                                    ( TL;DR ) 
  I made this project as a proof of concept back when I was still fairly new to designing/implementing my own C++
classes. This project was built to be a proof of concept based around a class with public member-functions whose 
implementations can vary based off the object's current state. The intent was to allow for a more elegant and
efficent way of providing the safety of a 'defensive-programming' design style while not having to resort to an
excessive reliance on pre-condition checks as part of every member function call. My thought was that it made a lot
more sense to simply change a set of function pointers once whenever a state-change occured in the object rather than
having to string together a sequence of 'if-statements' to determine state.
  This completed project wound up functioning exactly as I had imagined it would, and has since served as a handy
reference for implementing similar variations of this concept in my class designs.
       
       [P.S. An additional benefit of this project was it helped me overcome my fear of the dreadful function
           pointer syntax (this was written before I adopted modern C++1x features/luxeries such as std::function) ]  
           
       [P.P.S.  Typedefs are for sissies]
-------------------------------------------------------------------------------------------------------------------------
                                                                                             
   +-------[Theses 2 footnotes corresponds with the first paragraph in the 'BACKGROUND' section below, 
   |                       I haven't figured out where to put it yet tho] ----------------------------------------------------+
   V                                                                                                                          |
(* well, really the intent was to avoid unreasonable behavior in leu of displaying reasonable behavior, but I digress)--+     |
                                                                                                                        |     |
(** well, without limiting myself to only C and/or assembly [or Fortran])  <-------------------------------------------=)=----+
               W|W                                                                                                      |
                |                            --------------------                                                       |
                +-------------------------->  --  BACKGROUND  --   <----------------------------------------------------+
                                             --------------------
                                             
    Back when I first was beginning to make my own solo ventures into the titanically vast, murky abyssal depths of the 
domain/dominion of sizzling/crackling raw potential that is made possible through C++, I quickly discovered that to have
any hope of every effectivly harnessing the rampant, ethereal yet unbridled power that exists in the billions of modern-day
x86-, x64- and ARM-based processors** on earth, I was going to need to code myself some classes. It was for this reason that
most of my early experience with C++ (beyond what was taught in undergrad CS) was endemic to from the ground-up/scratch class
design and implementation. 

one of my early focuses into the language was my natural inclination for myself within the role of "class-designer" was to always take every step I could
think of to assure any code built involving my objects would execute in a reasonable way*
no matter what someone using my code would try to do with it. As such, the first several dozen C++ classes I designed
and implemented would zealously follow the 'defensive-programming' design philosophy. To ensure clarity, 'defensive-
programming' is carried out by requiring every non-trivial member function (and a large number of the trivial member
functions to boot) to engage in a comprehensive sequence of 'self-sanity' checks {i.e. 'if-statements'} which serve
to verify every potential aspect of the calling object's state which might have an impact towards the function's
execution. This sequence would be an integral part of each function call, which can be a source of much pain if 
any of the member functions are required as part of the execution of a loop. 
for ensuring the state of its object met all the necessary pre-conditions
before the function would execute any meaningful logic. If at any point along this sequence a pre-condition
failed to be satisfied, I would have the object report a unique and highly-desciptive error message expressing
details such as:
       (i)   what exactly went wrong, 
       (ii)  which function was the source* of the error message,            (* this was before I knew of the "__func__" macro required by the C++ standard)
       (iii) for especially egregious failures**, a customized often-humorous  
                self-deprecating message letting me know how badly I had       
                messed something up.                                         (** this is 99.9% of the reason why the 'default' case in a switch statement exists, right?)
After encountering a missed pre-condition and announcing the issue, each function would then return without 
making any change to the object.

    While building each class this way made writing any future code relaint upon these classes a breeze to
debug, it quickly was becoming apparent to me that this approach to class design had several major downsides. 
The most acute downside at that time was simply the sheer amount of additional coding*** required on my part  
to implement even the most basic of functionality; in some cases functions which had a fairly
redimentrary purpose would require several times as many lines of code for just checking preconditions
compared with the lines of code required to carry out the actual logic. This issue was made all-the-worse
by my inexperience towards writing error messages, with a wide veriety of formats and poorly-worded 
statements 

                                                                                             (*** by 'Coding', I mean 'Error Message String Formatting/Writing')


writing a unique error message containing for every possible with many of the checks simply being that the object has been properly initialized and 
hasn't become corrupt),

  
                                             ---------------------
                                              --  Description  --       [Incomplete]
                                             ---------------------
  The purpose of this project is to experiment with implementing a C++ class that has
public function pointers to its own private member functions. Based off the state of
the object, the public function pointers can be remapped from amongst the private member
functions so that the desired behavior is executed depending on the state of the object.

  While the same resulting functionality for the class could have been implemented with just
a single version of each remappable function where instead the implementation has them check
the object's state and then select the approprite behavior, performing this check can incur a
cost for a function that is called repeatedly. By using a class implemented with these
remappable function pointers, the cost of selecting the correct behavior is transfered from
being required as part of each function call to being only required once, reducing overhead.

  NOTE: 
To help with the readability of code within a class defining function pointers to class member
functions, it is advised to use a typedef to simplify the function-pointer syntax. A quick 
google search should provide numerous examples of this (and if I get time in the future I may
consider adding a second example class which uses typedefs for the function pointers).



               [And now for the fun section]


                                             ---------------------
                                                --  DOUBTS  --       (plus BONUS: All the 'lies' I tell myself to help ignore the doubt)
                                             ---------------------
  While this concept is cool and all, I have always been a little hesitant to fully commit to it as
  a whole new paradigm of class design and implementation. While as I continue to gain more experience 
  I can have hope that one day I will have my answers to these concerns*, I still feel it to be valuable 
  for me to list them here:                               
                                                          (*I suppose I could just write some code myself and then profile it, but I am
                                                                skeptical that I have enough mastery over my computer to fully trust my 
                                                                results. Perhaps if there comes a time when I can access several computers...)
                                                                
          
          (DOUBT 1)  
        Since this dynamic behavior technique {to me} seems to match all the benefits provided by the safety of the defensive-
           programming style whilest simultaniously avoiding the accumlated costs of the increased overhead for each function,
           why have I not seen this technique more widely utilized (or at least mentioned in various programming sources (StackOverflow, 
           various programming blogs, within textbooks). If anything, this design should have become even more common in the last decade
           because of the excellent new functionality plus modern STL libraries (e.g. 'std::function', lambda expressions,
           etc...) ever since C++11 hit the scene.  
           
          ('Lies' I tell myself about why DOUBT 1 isn't a big deal): 
        Fortunatly I can convince myself that the traditional syntax for function pointers is scary enough to scare away at least 99%
           of the sane population (an effect widely shared with indefinate integrals). Another 'lie' I can find comfort in is people tend 
           to stick to what they know, and it is perfectly fine to get by without ever messing with function pointers. 
        
        
        
           (DOUBT 2)
        Function Pointers do not play nice with x86 and x64 architecture. This doubt is based largely off speculation, but I have heard
           tale of a time long ago, when Pentium processors first hit the market. The Pentium architecture had seperate Integer and
           Floating-Point hardware pipelines (meaning depending on its type, data was manipulated and managed by physically seperate
           parts of the CPU hardware). This meant that casting a floating-point value to an integer (or vice-versa) required data to be
           transfered across different locations within the CPU, which if not done judiciously could lead to massive performance hits. 
        The current x86/x64-based CPUs in the vast majority of modern computers today are built to be completely backwards compatible with
           all previous x86 CPUs, so the split integer/floating-point pipelines may still be having some legacy influence on modern CPU
           architectures. However, this DOUBT most likely has been solved decades ago due to the many generations of CPU hardware since then,
           thus making it not an issue with modern CPUs, so I will skip the 'Lies' section for this DOUBT. However, it does lead me directly
           to a similar and perhaps much more real DOUBT...
           
           (DOUBT 2.5)
        Pipelined architectures are built to be highly streamlined. While one instruction is executing, another can be fetched 
           from memory during the same clock cycle while still another instuction is fetching data and a fourth instruction is 
           having its result cached. On top of that, many modern CPUs utilize an out-of-order execution model with modern techniques
           such as branch predicition and speculative execution. On top of all of this, CPUs for a while have been treating data and
           instructions as completly different entities, even though they are both physically composed of just binary information.
           Because of how complicated everyone on the internet says caches are, I guess I am going to have to not have as strong of
           an argument here for my DOUBT 2.5 as I anticipated. Basically what I was going to say to put the final nail in the coffin
           of DOUBT was that because CPUs treat data and instructions seperatly, using function pointers that get redefined as a program
           runs must lead to a massive sense of uncertainty for any compiler, and thus will take quite a few optimizations off the table. 
           The common consenses I have gotten from more experienced programmers (at least based off what they have written on the internet)
           is that modern compilers are so effective these days that really the best we as mere mortal human programmers can do is write
           the most uninspiried, bland and austere code possible if we really are interested in having the fastest running programs results.
           This in and of itself was not something I at first wanted to hear, but I have since come to terms with it being better than 
           before there were optimizing compilers. There is a reason things such as the demo-scene community exist for programmers who want
           to achieve the incredible. They just can't expect that sort of skill to be as highly sought after as it was in the old days.
           
       I'm rambling... Basically, DOUBT 2.5 boils down to the fact that using fancy tricks of this function-pointer variety is really just
           accomplishing locking your code out from a large number of extemely desirable modern compiler optimizations, before your code even
           has a chance to begin compiling. Taking this further, if modern processors really do have speculative-execution & branch-prediction
           that works as well as it sounds like it works on paper, then really all of those if-statements at the beginning of each function are
           going to be executed simultaniously, with hardly any noticable drop in performance in the slightest.
           
                           [WELL ACTUALLY WHILE WRITING THIS I DID SOME RESEARCH AND IT TURNS OUT FUNCTION POINTERS
                            ARE TYPICALLY TREATED/STORED AS DATA (RATHER THAN INSTRUCTIONS {WHICH MAKES SENSE BECAUSE
                            WRITING BACK TO INSTRUCTION MEMORY (by assigning a function pointer) FROM CPU IS A NO-NO})
                            OR ARE ABSTRACTED AWAY DURING COMPILATION. THUS, I AM GOING TO CALL THIS REBUTAL A 'FIB' 
                            INSTEAD OF A FULL-FLEDGED LIE]
                            
            ('FIB' I tell myself about why DOUBTS 2 & 2.5 aren't big deals): 
          Well, first off, the internet says so. Second off, see the last 2 sentences of DOUBT 2. 
                                             

           (DOUBT 3)
       Most programmers these days haven't the slightest clue how to work with function pointers, and thus any code that is written today
           that uses them is just making things harder to maintain without providing any real gain. 
           
           (I don't have a lie to tell myself for DOUBT 3, and in fact this reason alone is probably enough to avoid function pointers)
           
           
           
                                          [ FINAL SECTION! ]
 
                                             ---------------------
                                                --   HOPE   --       (plus BONUS: All the 'lies' I tell myself to help ignore the doubt)
                                             ---------------------
        The HOPE I have that makes this whole thing worthwhile is the unique solution it can provide to a certain issue I ran into while writing
            a series of OpenGL_Supporting classes contained within the namespace "ShaderInterface" (and I don't care if you think namespaces must always be lowercase).
            
        Let me set up the issue I was encountering, and then explain how using this technique led me to a solution that solved all of my issues while 
            only creating the sole new issue of the code being a pain-in-the-u-know-what to write. 
            if using a class as an intermediary
            between 
        If you have read this far and are still interested, you can take a look for yourself at my project/repository where I did this very thing,
        The repository is titled "OpenGL_Windows_Projects". Once there, Open the folder titled "OpenGL_GLFW_Project". In that messy messy folder, 
        find the following 6 files: 
        
                    - "ShaderProgram.h"  and "ShaderProgram.cpp"      
                    
                    Description of ShaderProgram:      This is the code that serves as the public interface for
                                                         a large amount of supporting code underneath. Notice however how
                                                         in the ShaderProgram class, there is a public member object of type
                                                         <UniformLocationInterface> (it should be right above the word 'private'
                                                                      (and ya ya, I know that is one whole metric heck of a lot of private functions...
                                                                                    I was still unfamiliar with the PIMPL idiom when I wrote this).
               
               
               That will lead us to our next 2 files:
                                                                      
                      FIRST, Our Lawyers Have Required Us To Post The Following Disclaimers:  
                   ++~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~++              +-------------+
                   |Z|    WARNING                               WARNING                            WARNING   |Z|              | ! WARNING ! |
                   ++~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~++    +---------+             +----------+
                   |Z|  IT IS RECOMMENDED THAT THE ELDERLY AND SMALL CHILDREN AVOID LOOKING DIRECTLY AT      |Z|    |  ATTENTION ALL JAVA PROGRAMMERS  |
                   |Z|      THIS UPCOMING '.cpp' IMPLEMENTATION FILE FOR MORE THAN A FEW SECONDS AT A TIME   |Z|    |      Several recent medical      |
                   |Z|      TO AVOID IRREPARABLY PERMANENT SCARRING. ALSO THOSE WHO ARE UNABLE TO STAND THE  |Z|    |     studies have demonstrated    |
                   |Z|      SIGHT OF RAW FUNCTION POINTERS WITHOUT FAINTING ARE ADVISED TO VIEW THESE FILES  |Z|    |     that Java programmers are    |
                   |Z|      WITH CAUTION!                                                                    |z|    |     especially susceptible to    |
                   |Z|                               YOU HAVE BEEN WARNED!                                   |Z|    |    the permanent scaring which   |                         
                   ++=========================================================================================++    | even a single second of indirect |                                              
                                                                                                                    | exposure to Raw Function Pointers|
                                                                                                                    | has repeatedly in lab tests been |
                        +-----------------------------------------------------------------+                         | shown to cause. It is recomended |
                        |        CAUTION!         CAUTION!     CAUTION!       CAUTION!    |                         |  you evacuate the local address  |
                        | The Long-Term Effects of Raw Function Pointer Exposure on C#    |                         | space ASAP whenever there is even|
                        | programmers is currently unknown and a major topic in medical   |                         | the slightest possiblity of a Raw|  
                        | research. If you are a C# programmer and would like to partici- |                         | Function Pointer exposure event. |
                        | pate in ongoing medical trials, please consult with your nearest|                         +----------------------------------+
                        | .NET-approved medical provider. Be aware that participants may  |
                        | potentially be labeled as "unsafe" and quarentined at any time. |
                        +-----------------------------------------------------------------+                                                                                           
NING: RAW FUNCTION POINTERS! HAZMAT SUIT REQUIRED!]                          [WARNING: RAW FUNCTION POINTERS! HAZMAT SUIT REQUIRED!] 
            ++-------------------------------------------------------------------------------++
            ||      "UniformLocationInterface.h"   and    "UniformLocationInterface.cpp"     ||
            ++-------------------------------------------------------------------------------++     
                 [WARNING: RAW FUNCTION POINTERS! HAZMAT SUIT REQUIRED!]                          [WARNING: RAW FUNCTION POINTERS! HAZMAT SUIT REQUIRED!] 



                 Description of UniformLocationInterface:    These 2 files here are the stars of the show. If you have 
                                                               the stomach for it, then feel free to take one of these mirrors.
                                                               It was recently determined that no one (not even C++ programmers) should
                                                               be exposed to function pointers for any amount of time. Luckily we found
                                                               a loop hole where you can still get a look at this ".cpp" implementation  
                                                               file as long as you only see the file using the mirror. Best take a look now
                                                               because this loophole could be closed any day now  [THANKS TO @#!% APPLE]                
                                                                               
                                                           REMEMBER: BE SURE TO NOT LOOK AT THE IMPLEMENTATION FILE DIRECTLY!
                                                                                      
                                                             Why this could be your last chance perhaps. No where else in the world would you possibly
                                                               be able to witness such uncanny, jaw-dropingly majestical syntactical triple-backflips
                                                               being performed in such incredible rapid succession within the ever-so-tiny enclosed                         
                                                               confined space of these 3-parameter function calls in code in any language whilest                          
                                                               maintaining the perfect balance of yin and yang that exists between repeated calls to                         
                                                               std::bind and the ever-so-smooth static casting of giant swarms of function pointers, all                         
                                                               within one line!                          
                                                                                        

                         










